// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/gateway_configuration_service.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/gateway_configuration_service.proto", fileDescriptor_407d56816eb7e66c)
}

var fileDescriptor_407d56816eb7e66c = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4f, 0x8e, 0xd3, 0x30,
	0x14, 0xc6, 0xd5, 0x11, 0x62, 0x91, 0x05, 0x42, 0x96, 0x60, 0x31, 0x7f, 0x24, 0x54, 0x36, 0xa0,
	0x51, 0x6c, 0xda, 0x88, 0x03, 0x00, 0xa3, 0x56, 0x40, 0x85, 0xaa, 0x8e, 0x18, 0x21, 0x36, 0x95,
	0x9b, 0x38, 0x6e, 0x88, 0xeb, 0x17, 0xe2, 0x97, 0x84, 0x6a, 0xc4, 0x86, 0x2b, 0x20, 0xae, 0x82,
	0xc4, 0x8a, 0x23, 0xb0, 0x80, 0x23, 0x70, 0x10, 0x14, 0x3b, 0x99, 0x69, 0x3b, 0xe5, 0xcf, 0x0c,
	0x9b, 0xc4, 0xb2, 0xbf, 0xf7, 0xf9, 0xf7, 0x3d, 0xf9, 0x79, 0x0f, 0x15, 0xe4, 0xbc, 0xe2, 0xda,
	0x37, 0xc8, 0xc3, 0x94, 0xf1, 0x2c, 0x61, 0x92, 0xa3, 0xa8, 0xf8, 0x72, 0x1a, 0x82, 0x8e, 0x13,
	0x59, 0xe4, 0x1c, 0x13, 0xd0, 0x53, 0x23, 0xf2, 0x32, 0x09, 0x05, 0xcd, 0x72, 0x40, 0x20, 0x37,
	0x10, 0x35, 0x6d, 0x4a, 0x69, 0x19, 0xec, 0x3e, 0x92, 0x09, 0xce, 0x8b, 0x19, 0x0d, 0x61, 0xc1,
	0x84, 0x2e, 0x61, 0x99, 0xe5, 0xf0, 0x6e, 0xc9, 0xac, 0x38, 0xf4, 0xa5, 0xd0, 0x7e, 0xc9, 0x55,
	0x12, 0x71, 0x14, 0xec, 0xc2, 0xc2, 0x59, 0xee, 0xee, 0x4b, 0x00, 0xa9, 0x84, 0x45, 0xe0, 0x5a,
	0x03, 0xda, 0x7b, 0x4d, 0x73, 0xea, 0xff, 0x23, 0x67, 0x23, 0xbf, 0xf7, 0x7b, 0x79, 0x13, 0xa4,
	0x31, 0xee, 0xff, 0xb8, 0xe6, 0xed, 0x0d, 0xdd, 0xd1, 0x93, 0x55, 0xa3, 0x63, 0x27, 0x23, 0x5f,
	0x3a, 0xde, 0xed, 0x63, 0xb1, 0x40, 0x11, 0xce, 0x5f, 0x1e, 0x8d, 0x87, 0x0a, 0x66, 0x5c, 0x39,
	0x21, 0x61, 0x74, 0xbd, 0x0b, 0x74, 0x5c, 0x28, 0xb5, 0xcd, 0x6b, 0x22, 0xde, 0x16, 0xc2, 0xe0,
	0xee, 0x9d, 0xcd, 0x82, 0x73, 0x63, 0xa7, 0xef, 0x8e, 0x3e, 0x7c, 0xff, 0xf9, 0x71, 0x67, 0x40,
	0x8e, 0x2c, 0x72, 0x19, 0x30, 0x19, 0x9a, 0x96, 0xdc, 0xb0, 0xd3, 0x36, 0x43, 0x12, 0x19, 0x7a,
	0xbe, 0x7e, 0xcf, 0x8c, 0xf3, 0x29, 0xa2, 0x8c, 0x49, 0x4b, 0x68, 0x9b, 0x42, 0x3e, 0x77, 0x3c,
	0xf2, 0x5c, 0xe4, 0x2a, 0xd1, 0xe9, 0x08, 0x72, 0x1e, 0x5d, 0x95, 0x7b, 0x6f, 0xb3, 0x60, 0xc5,
	0xad, 0x3b, 0xb1, 0xc8, 0x23, 0xf2, 0xec, 0x72, 0xc8, 0xa9, 0xe3, 0xf2, 0xc3, 0x2c, 0x66, 0xb5,
	0x73, 0xe4, 0xbe, 0xf4, 0x8d, 0x01, 0x4d, 0xbe, 0x76, 0xbc, 0x5b, 0xab, 0xe0, 0x83, 0xea, 0xca,
	0xec, 0x07, 0xdb, 0xd8, 0xcf, 0xfc, 0xba, 0x27, 0x96, 0x7e, 0x4c, 0x5e, 0xfc, 0x1f, 0x7d, 0x5c,
	0x45, 0xed, 0x9f, 0x22, 0x2c, 0x54, 0xff, 0xdb, 0x8e, 0x77, 0xf0, 0x87, 0x67, 0x75, 0xd2, 0x27,
	0x9f, 0x3a, 0x9e, 0x37, 0x14, 0xd8, 0x88, 0x2e, 0x1f, 0xec, 0xee, 0x66, 0x41, 0x23, 0x7e, 0xaa,
	0x63, 0x98, 0x08, 0x93, 0x81, 0x36, 0xa2, 0xdb, 0xb3, 0xf1, 0x0e, 0xc9, 0x7d, 0x17, 0xaf, 0xff,
	0xf7, 0x68, 0x35, 0xd7, 0xcd, 0xa1, 0xc0, 0x41, 0x5e, 0xdf, 0xa3, 0xc3, 0xe5, 0x58, 0x71, 0x4d,
	0xe8, 0x36, 0xba, 0x35, 0x89, 0x63, 0x6c, 0xe1, 0xf6, 0x2f, 0xbc, 0xf4, 0x57, 0xbd, 0xe0, 0x41,
	0xaf, 0x69, 0x7a, 0x60, 0xa9, 0x7c, 0x72, 0xd8, 0x52, 0xc5, 0xad, 0x93, 0x9f, 0x29, 0xae, 0x0d,
	0x3b, 0x3d, 0xdb, 0x98, 0xd6, 0x1b, 0x35, 0xd7, 0xe3, 0xde, 0x6b, 0x26, 0x81, 0xe2, 0x5c, 0xe0,
	0x3c, 0xd1, 0xd2, 0x50, 0x2d, 0xb0, 0x82, 0x3c, 0x65, 0xeb, 0x93, 0x5e, 0x06, 0x2c, 0x4b, 0x25,
	0x43, 0xd4, 0xd9, 0x6c, 0x76, 0xdd, 0x8e, 0x78, 0xf0, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xff,
	0x59, 0x33, 0xe5, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayConfigurationServiceClient is the client API for GatewayConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayConfigurationServiceClient interface {
	SemtechUDPGlobalConfig(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*SemtechUDPConfig, error)
	KerlinkLoradConfig(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*LoradConfig, error)
	KerlinkLoradFwdConfig(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*LoraFwdConfig, error)
}

type gatewayConfigurationServiceClient struct {
	cc *grpc.ClientConn
}

func NewGatewayConfigurationServiceClient(cc *grpc.ClientConn) GatewayConfigurationServiceClient {
	return &gatewayConfigurationServiceClient{cc}
}

func (c *gatewayConfigurationServiceClient) SemtechUDPGlobalConfig(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*SemtechUDPConfig, error) {
	out := new(SemtechUDPConfig)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayConfigurationService/SemtechUDPGlobalConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConfigurationServiceClient) KerlinkLoradConfig(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*LoradConfig, error) {
	out := new(LoradConfig)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayConfigurationService/KerlinkLoradConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConfigurationServiceClient) KerlinkLoradFwdConfig(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*LoraFwdConfig, error) {
	out := new(LoraFwdConfig)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayConfigurationService/KerlinkLoradFwdConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayConfigurationServiceServer is the server API for GatewayConfigurationService service.
type GatewayConfigurationServiceServer interface {
	SemtechUDPGlobalConfig(context.Context, *PullGatewayConfigurationRequest) (*SemtechUDPConfig, error)
	KerlinkLoradConfig(context.Context, *PullGatewayConfigurationRequest) (*LoradConfig, error)
	KerlinkLoradFwdConfig(context.Context, *PullGatewayConfigurationRequest) (*LoraFwdConfig, error)
}

// UnimplementedGatewayConfigurationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayConfigurationServiceServer struct {
}

func (*UnimplementedGatewayConfigurationServiceServer) SemtechUDPGlobalConfig(ctx context.Context, req *PullGatewayConfigurationRequest) (*SemtechUDPConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SemtechUDPGlobalConfig not implemented")
}
func (*UnimplementedGatewayConfigurationServiceServer) KerlinkLoradConfig(ctx context.Context, req *PullGatewayConfigurationRequest) (*LoradConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KerlinkLoradConfig not implemented")
}
func (*UnimplementedGatewayConfigurationServiceServer) KerlinkLoradFwdConfig(ctx context.Context, req *PullGatewayConfigurationRequest) (*LoraFwdConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KerlinkLoradFwdConfig not implemented")
}

func RegisterGatewayConfigurationServiceServer(s *grpc.Server, srv GatewayConfigurationServiceServer) {
	s.RegisterService(&_GatewayConfigurationService_serviceDesc, srv)
}

func _GatewayConfigurationService_SemtechUDPGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullGatewayConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConfigurationServiceServer).SemtechUDPGlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayConfigurationService/SemtechUDPGlobalConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConfigurationServiceServer).SemtechUDPGlobalConfig(ctx, req.(*PullGatewayConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConfigurationService_KerlinkLoradConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullGatewayConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConfigurationServiceServer).KerlinkLoradConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayConfigurationService/KerlinkLoradConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConfigurationServiceServer).KerlinkLoradConfig(ctx, req.(*PullGatewayConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConfigurationService_KerlinkLoradFwdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullGatewayConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConfigurationServiceServer).KerlinkLoradFwdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayConfigurationService/KerlinkLoradFwdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConfigurationServiceServer).KerlinkLoradFwdConfig(ctx, req.(*PullGatewayConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayConfigurationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayConfigurationService",
	HandlerType: (*GatewayConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SemtechUDPGlobalConfig",
			Handler:    _GatewayConfigurationService_SemtechUDPGlobalConfig_Handler,
		},
		{
			MethodName: "KerlinkLoradConfig",
			Handler:    _GatewayConfigurationService_KerlinkLoradConfig_Handler,
		},
		{
			MethodName: "KerlinkLoradFwdConfig",
			Handler:    _GatewayConfigurationService_KerlinkLoradFwdConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gateway_configuration_service.proto",
}

// GatewayConfigurationServiceV2Client is the client API for GatewayConfigurationServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayConfigurationServiceV2Client interface {
	GetGateway(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*GatewayInfoResponse, error)
	GetFrequencyPlan(ctx context.Context, in *PullFrequencyPlanConfigRequest, opts ...grpc.CallOption) (*SX1301Config, error)
}

type gatewayConfigurationServiceV2Client struct {
	cc *grpc.ClientConn
}

func NewGatewayConfigurationServiceV2Client(cc *grpc.ClientConn) GatewayConfigurationServiceV2Client {
	return &gatewayConfigurationServiceV2Client{cc}
}

func (c *gatewayConfigurationServiceV2Client) GetGateway(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (*GatewayInfoResponse, error) {
	out := new(GatewayInfoResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayConfigurationServiceV2/GetGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConfigurationServiceV2Client) GetFrequencyPlan(ctx context.Context, in *PullFrequencyPlanConfigRequest, opts ...grpc.CallOption) (*SX1301Config, error) {
	out := new(SX1301Config)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayConfigurationServiceV2/GetFrequencyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayConfigurationServiceV2Server is the server API for GatewayConfigurationServiceV2 service.
type GatewayConfigurationServiceV2Server interface {
	GetGateway(context.Context, *PullGatewayConfigurationRequest) (*GatewayInfoResponse, error)
	GetFrequencyPlan(context.Context, *PullFrequencyPlanConfigRequest) (*SX1301Config, error)
}

// UnimplementedGatewayConfigurationServiceV2Server can be embedded to have forward compatible implementations.
type UnimplementedGatewayConfigurationServiceV2Server struct {
}

func (*UnimplementedGatewayConfigurationServiceV2Server) GetGateway(ctx context.Context, req *PullGatewayConfigurationRequest) (*GatewayInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (*UnimplementedGatewayConfigurationServiceV2Server) GetFrequencyPlan(ctx context.Context, req *PullFrequencyPlanConfigRequest) (*SX1301Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrequencyPlan not implemented")
}

func RegisterGatewayConfigurationServiceV2Server(s *grpc.Server, srv GatewayConfigurationServiceV2Server) {
	s.RegisterService(&_GatewayConfigurationServiceV2_serviceDesc, srv)
}

func _GatewayConfigurationServiceV2_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullGatewayConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConfigurationServiceV2Server).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayConfigurationServiceV2/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConfigurationServiceV2Server).GetGateway(ctx, req.(*PullGatewayConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConfigurationServiceV2_GetFrequencyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullFrequencyPlanConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConfigurationServiceV2Server).GetFrequencyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayConfigurationServiceV2/GetFrequencyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConfigurationServiceV2Server).GetFrequencyPlan(ctx, req.(*PullFrequencyPlanConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayConfigurationServiceV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayConfigurationServiceV2",
	HandlerType: (*GatewayConfigurationServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGateway",
			Handler:    _GatewayConfigurationServiceV2_GetGateway_Handler,
		},
		{
			MethodName: "GetFrequencyPlan",
			Handler:    _GatewayConfigurationServiceV2_GetFrequencyPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gateway_configuration_service.proto",
}
