// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *LBTChannelConfig) SetFields(src *LBTChannelConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Frequency = src.Frequency
			} else {
				var zero uint64
				dst.Frequency = zero
			}
		case "scan_time_microseconds":
			if len(subs) > 0 {
				return fmt.Errorf("'scan_time_microseconds' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ScanTimeMicroseconds = src.ScanTimeMicroseconds
			} else {
				var zero uint32
				dst.ScanTimeMicroseconds = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *LBTConfig) SetFields(src *LBTConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "enable":
			if len(subs) > 0 {
				return fmt.Errorf("'enable' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Enable = src.Enable
			} else {
				var zero bool
				dst.Enable = zero
			}
		case "rssi_target":
			if len(subs) > 0 {
				return fmt.Errorf("'rssi_target' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RssiTarget = src.RssiTarget
			} else {
				var zero float32
				dst.RssiTarget = zero
			}
		case "channel_configs":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_configs' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelConfigs = src.ChannelConfigs
			} else {
				dst.ChannelConfigs = nil
			}
		case "rssi_offset":
			if len(subs) > 0 {
				return fmt.Errorf("'rssi_offset' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RssiOffset = src.RssiOffset
			} else {
				var zero float32
				dst.RssiOffset = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *RFConfig) SetFields(src *RFConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "enable":
			if len(subs) > 0 {
				return fmt.Errorf("'enable' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Enable = src.Enable
			} else {
				var zero bool
				dst.Enable = zero
			}
		case "type":
			if len(subs) > 0 {
				return fmt.Errorf("'type' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Type = src.Type
			} else {
				var zero string
				dst.Type = zero
			}
		case "frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Frequency = src.Frequency
			} else {
				var zero uint64
				dst.Frequency = zero
			}
		case "rssi_offset":
			if len(subs) > 0 {
				return fmt.Errorf("'rssi_offset' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RssiOffset = src.RssiOffset
			} else {
				var zero float32
				dst.RssiOffset = zero
			}
		case "tx_enable":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_enable' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxEnable = src.TxEnable
			} else {
				var zero bool
				dst.TxEnable = zero
			}
		case "tx_freq_min":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_freq_min' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxFreqMin = src.TxFreqMin
			} else {
				var zero uint64
				dst.TxFreqMin = zero
			}
		case "tx_freq_max":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_freq_max' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxFreqMax = src.TxFreqMax
			} else {
				var zero uint64
				dst.TxFreqMax = zero
			}
		case "tx_notch_freq":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_notch_freq' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxNotchFreq = src.TxNotchFreq
			} else {
				var zero uint64
				dst.TxNotchFreq = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *IFConfig) SetFields(src *IFConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "enable":
			if len(subs) > 0 {
				return fmt.Errorf("'enable' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Enable = src.Enable
			} else {
				var zero bool
				dst.Enable = zero
			}
		case "radio":
			if len(subs) > 0 {
				return fmt.Errorf("'radio' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Radio = src.Radio
			} else {
				var zero uint32
				dst.Radio = zero
			}
		case "if_value":
			if len(subs) > 0 {
				return fmt.Errorf("'if_value' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IfValue = src.IfValue
			} else {
				var zero int32
				dst.IfValue = zero
			}
		case "bandwidth":
			if len(subs) > 0 {
				return fmt.Errorf("'bandwidth' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Bandwidth = src.Bandwidth
			} else {
				var zero uint32
				dst.Bandwidth = zero
			}
		case "spread_factor":
			if len(subs) > 0 {
				return fmt.Errorf("'spread_factor' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SpreadFactor = src.SpreadFactor
			} else {
				var zero uint32
				dst.SpreadFactor = zero
			}
		case "datarate":
			if len(subs) > 0 {
				return fmt.Errorf("'datarate' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Datarate = src.Datarate
			} else {
				var zero uint32
				dst.Datarate = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *TxLUTConfig) SetFields(src *TxLUTConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "pa_gain":
			if len(subs) > 0 {
				return fmt.Errorf("'pa_gain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PaGain = src.PaGain
			} else {
				var zero int32
				dst.PaGain = zero
			}
		case "mix_gain":
			if len(subs) > 0 {
				return fmt.Errorf("'mix_gain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MixGain = src.MixGain
			} else {
				var zero int32
				dst.MixGain = zero
			}
		case "rf_power":
			if len(subs) > 0 {
				return fmt.Errorf("'rf_power' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RfPower = src.RfPower
			} else {
				var zero int32
				dst.RfPower = zero
			}
		case "dig_gain":
			if len(subs) > 0 {
				return fmt.Errorf("'dig_gain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DigGain = src.DigGain
			} else {
				var zero int32
				dst.DigGain = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SX1301Config) SetFields(src *SX1301Config, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "lorawan_public":
			if len(subs) > 0 {
				return fmt.Errorf("'lorawan_public' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LorawanPublic = src.LorawanPublic
			} else {
				var zero bool
				dst.LorawanPublic = zero
			}
		case "clock_source":
			if len(subs) > 0 {
				return fmt.Errorf("'clock_source' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ClockSource = src.ClockSource
			} else {
				var zero uint32
				dst.ClockSource = zero
			}
		case "antenna_gain":
			if len(subs) > 0 {
				return fmt.Errorf("'antenna_gain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AntennaGain = src.AntennaGain
			} else {
				var zero float32
				dst.AntennaGain = zero
			}
		case "lbt_config":
			if len(subs) > 0 {
				var newDst, newSrc *LBTConfig
				if (src == nil || src.LbtConfig == nil) && dst.LbtConfig == nil {
					continue
				}
				if src != nil {
					newSrc = src.LbtConfig
				}
				if dst.LbtConfig != nil {
					newDst = dst.LbtConfig
				} else {
					newDst = &LBTConfig{}
					dst.LbtConfig = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.LbtConfig = src.LbtConfig
				} else {
					dst.LbtConfig = nil
				}
			}
		case "radios":
			if len(subs) > 0 {
				return fmt.Errorf("'radios' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Radios = src.Radios
			} else {
				dst.Radios = nil
			}
		case "channels":
			if len(subs) > 0 {
				return fmt.Errorf("'channels' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Channels = src.Channels
			} else {
				dst.Channels = nil
			}
		case "lora_standard_channel":
			if len(subs) > 0 {
				var newDst, newSrc *IFConfig
				if (src == nil || src.LoraStandardChannel == nil) && dst.LoraStandardChannel == nil {
					continue
				}
				if src != nil {
					newSrc = src.LoraStandardChannel
				}
				if dst.LoraStandardChannel != nil {
					newDst = dst.LoraStandardChannel
				} else {
					newDst = &IFConfig{}
					dst.LoraStandardChannel = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.LoraStandardChannel = src.LoraStandardChannel
				} else {
					dst.LoraStandardChannel = nil
				}
			}
		case "fsk_channel":
			if len(subs) > 0 {
				var newDst, newSrc *IFConfig
				if (src == nil || src.FskChannel == nil) && dst.FskChannel == nil {
					continue
				}
				if src != nil {
					newSrc = src.FskChannel
				}
				if dst.FskChannel != nil {
					newDst = dst.FskChannel
				} else {
					newDst = &IFConfig{}
					dst.FskChannel = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.FskChannel = src.FskChannel
				} else {
					dst.FskChannel = nil
				}
			}
		case "tx_lut_configs":
			if len(subs) > 0 {
				return fmt.Errorf("'tx_lut_configs' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TxLutConfigs = src.TxLutConfigs
			} else {
				dst.TxLutConfigs = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SemtechUDPConfig) SetFields(src *SemtechUDPConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "sx1301_config":
			if len(subs) > 0 {
				var newDst, newSrc *SX1301Config
				if (src == nil || src.Sx1301Config == nil) && dst.Sx1301Config == nil {
					continue
				}
				if src != nil {
					newSrc = src.Sx1301Config
				}
				if dst.Sx1301Config != nil {
					newDst = dst.Sx1301Config
				} else {
					newDst = &SX1301Config{}
					dst.Sx1301Config = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Sx1301Config = src.Sx1301Config
				} else {
					dst.Sx1301Config = nil
				}
			}
		case "gateway_config":
			if len(subs) > 0 {
				var newDst, newSrc *SemtechUDPConfig_GatewayConfig
				if (src == nil || src.GatewayConfig == nil) && dst.GatewayConfig == nil {
					continue
				}
				if src != nil {
					newSrc = src.GatewayConfig
				}
				if dst.GatewayConfig != nil {
					newDst = dst.GatewayConfig
				} else {
					newDst = &SemtechUDPConfig_GatewayConfig{}
					dst.GatewayConfig = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayConfig = src.GatewayConfig
				} else {
					dst.GatewayConfig = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *LoradConfig) SetFields(src *LoradConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "sx1301_config":
			if len(subs) > 0 {
				var newDst, newSrc *LoradConfig_LoradSX1301Config
				if (src == nil || src.Sx1301Config == nil) && dst.Sx1301Config == nil {
					continue
				}
				if src != nil {
					newSrc = src.Sx1301Config
				}
				if dst.Sx1301Config != nil {
					newDst = dst.Sx1301Config
				} else {
					newDst = &LoradConfig_LoradSX1301Config{}
					dst.Sx1301Config = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Sx1301Config = src.Sx1301Config
				} else {
					dst.Sx1301Config = nil
				}
			}
		case "gateway_config":
			if len(subs) > 0 {
				var newDst, newSrc *LoradConfig_GatewayConfig
				if (src == nil || src.GatewayConfig == nil) && dst.GatewayConfig == nil {
					continue
				}
				if src != nil {
					newSrc = src.GatewayConfig
				}
				if dst.GatewayConfig != nil {
					newDst = dst.GatewayConfig
				} else {
					newDst = &LoradConfig_GatewayConfig{}
					dst.GatewayConfig = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayConfig = src.GatewayConfig
				} else {
					dst.GatewayConfig = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *LoraFwdConfig) SetFields(src *LoraFwdConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "gateway":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayIdentifiers
				if (src == nil || src.Gateway == nil) && dst.Gateway == nil {
					continue
				}
				if src != nil {
					newSrc = src.Gateway
				}
				if dst.Gateway != nil {
					newDst = dst.Gateway
				} else {
					newDst = &GatewayIdentifiers{}
					dst.Gateway = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Gateway = src.Gateway
				} else {
					dst.Gateway = nil
				}
			}
		case "filter":
			if len(subs) > 0 {
				var newDst, newSrc *LoraFwdConfig_Filter
				if (src == nil || src.Filter == nil) && dst.Filter == nil {
					continue
				}
				if src != nil {
					newSrc = src.Filter
				}
				if dst.Filter != nil {
					newDst = dst.Filter
				} else {
					newDst = &LoraFwdConfig_Filter{}
					dst.Filter = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Filter = src.Filter
				} else {
					dst.Filter = nil
				}
			}
		case "database":
			if len(subs) > 0 {
				var newDst, newSrc *LoraFwdConfig_Database
				if (src == nil || src.Database == nil) && dst.Database == nil {
					continue
				}
				if src != nil {
					newSrc = src.Database
				}
				if dst.Database != nil {
					newDst = dst.Database
				} else {
					newDst = &LoraFwdConfig_Database{}
					dst.Database = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Database = src.Database
				} else {
					dst.Database = nil
				}
			}
		case "gwmp":
			if len(subs) > 0 {
				var newDst, newSrc *LoraFwdConfig_GWMPConfig
				if (src == nil || src.Gwmp == nil) && dst.Gwmp == nil {
					continue
				}
				if src != nil {
					newSrc = src.Gwmp
				}
				if dst.Gwmp != nil {
					newDst = dst.Gwmp
				} else {
					newDst = &LoraFwdConfig_GWMPConfig{}
					dst.Gwmp = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Gwmp = src.Gwmp
				} else {
					dst.Gwmp = nil
				}
			}
		case "api":
			if len(subs) > 0 {
				var newDst, newSrc *LoraFwdConfig_API
				if (src == nil || src.Api == nil) && dst.Api == nil {
					continue
				}
				if src != nil {
					newSrc = src.Api
				}
				if dst.Api != nil {
					newDst = dst.Api
				} else {
					newDst = &LoraFwdConfig_API{}
					dst.Api = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Api = src.Api
				} else {
					dst.Api = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayInfoResponse) SetFields(src *GatewayInfoResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "id":
			if len(subs) > 0 {
				return fmt.Errorf("'id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Id = src.Id
			} else {
				var zero string
				dst.Id = zero
			}
		case "attributes":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayInfoResponse_Attributes
				if (src == nil || src.Attributes == nil) && dst.Attributes == nil {
					continue
				}
				if src != nil {
					newSrc = src.Attributes
				}
				if dst.Attributes != nil {
					newDst = dst.Attributes
				} else {
					newDst = &GatewayInfoResponse_Attributes{}
					dst.Attributes = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Attributes = src.Attributes
				} else {
					dst.Attributes = nil
				}
			}
		case "frequency_plan":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_plan' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyPlan = src.FrequencyPlan
			} else {
				var zero string
				dst.FrequencyPlan = zero
			}
		case "frequency_plan_url":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_plan_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyPlanUrl = src.FrequencyPlanUrl
			} else {
				var zero string
				dst.FrequencyPlanUrl = zero
			}
		case "auto_update":
			if len(subs) > 0 {
				return fmt.Errorf("'auto_update' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AutoUpdate = src.AutoUpdate
			} else {
				var zero bool
				dst.AutoUpdate = zero
			}
		case "firmware_url":
			if len(subs) > 0 {
				return fmt.Errorf("'firmware_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FirmwareUrl = src.FirmwareUrl
			} else {
				var zero string
				dst.FirmwareUrl = zero
			}
		case "antenna_location":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayInfoResponse_AntennaLocation
				if (src == nil || src.AntennaLocation == nil) && dst.AntennaLocation == nil {
					continue
				}
				if src != nil {
					newSrc = src.AntennaLocation
				}
				if dst.AntennaLocation != nil {
					newDst = dst.AntennaLocation
				} else {
					newDst = &GatewayInfoResponse_AntennaLocation{}
					dst.AntennaLocation = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.AntennaLocation = src.AntennaLocation
				} else {
					dst.AntennaLocation = nil
				}
			}
		case "oauth2_token":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayInfoResponse_OAuth2Token
				if (src == nil || src.Oauth2Token == nil) && dst.Oauth2Token == nil {
					continue
				}
				if src != nil {
					newSrc = src.Oauth2Token
				}
				if dst.Oauth2Token != nil {
					newDst = dst.Oauth2Token
				} else {
					newDst = &GatewayInfoResponse_OAuth2Token{}
					dst.Oauth2Token = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Oauth2Token = src.Oauth2Token
				} else {
					dst.Oauth2Token = nil
				}
			}
		case "router":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayInfoResponse_Router
				if (src == nil || src.Router == nil) && dst.Router == nil {
					continue
				}
				if src != nil {
					newSrc = src.Router
				}
				if dst.Router != nil {
					newDst = dst.Router
				} else {
					newDst = &GatewayInfoResponse_Router{}
					dst.Router = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Router = src.Router
				} else {
					dst.Router = nil
				}
			}
		case "fallback_routers":
			if len(subs) > 0 {
				return fmt.Errorf("'fallback_routers' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FallbackRouters = src.FallbackRouters
			} else {
				dst.FallbackRouters = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *PullFrequencyPlanConfigRequest) SetFields(src *PullFrequencyPlanConfigRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "frequency_plan_id":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_plan_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyPlanId = src.FrequencyPlanId
			} else {
				var zero string
				dst.FrequencyPlanId = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SemtechUDPConfig_GatewayConfig) SetFields(src *SemtechUDPConfig_GatewayConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "gateway_id":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayIdentifiers
				if (src == nil || src.GatewayId == nil) && dst.GatewayId == nil {
					continue
				}
				if src != nil {
					newSrc = src.GatewayId
				}
				if dst.GatewayId != nil {
					newDst = dst.GatewayId
				} else {
					newDst = &GatewayIdentifiers{}
					dst.GatewayId = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayId = src.GatewayId
				} else {
					dst.GatewayId = nil
				}
			}
		case "server_address":
			if len(subs) > 0 {
				return fmt.Errorf("'server_address' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ServerAddress = src.ServerAddress
			} else {
				var zero string
				dst.ServerAddress = zero
			}
		case "server_port_up":
			if len(subs) > 0 {
				return fmt.Errorf("'server_port_up' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ServerPortUp = src.ServerPortUp
			} else {
				var zero uint32
				dst.ServerPortUp = zero
			}
		case "server_port_down":
			if len(subs) > 0 {
				return fmt.Errorf("'server_port_down' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ServerPortDown = src.ServerPortDown
			} else {
				var zero uint32
				dst.ServerPortDown = zero
			}
		case "enabled":
			if len(subs) > 0 {
				return fmt.Errorf("'enabled' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Enabled = src.Enabled
			} else {
				var zero bool
				dst.Enabled = zero
			}
		case "servers":
			if len(subs) > 0 {
				return fmt.Errorf("'servers' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Servers = src.Servers
			} else {
				dst.Servers = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *LoradConfig_LoradSX1301Config) SetFields(src *LoradConfig_LoradSX1301Config, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "global_config":
			if len(subs) > 0 {
				var newDst, newSrc *SX1301Config
				if (src == nil || src.GlobalConfig == nil) && dst.GlobalConfig == nil {
					continue
				}
				if src != nil {
					newSrc = src.GlobalConfig
				}
				if dst.GlobalConfig != nil {
					newDst = dst.GlobalConfig
				} else {
					newDst = &SX1301Config{}
					dst.GlobalConfig = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GlobalConfig = src.GlobalConfig
				} else {
					dst.GlobalConfig = nil
				}
			}
		case "insertion_loss":
			if len(subs) > 0 {
				return fmt.Errorf("'insertion_loss' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.InsertionLoss = src.InsertionLoss
			} else {
				var zero float32
				dst.InsertionLoss = zero
			}
		case "insertion_loss_desc":
			if len(subs) > 0 {
				return fmt.Errorf("'insertion_loss_desc' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.InsertionLossDesc = src.InsertionLossDesc
			} else {
				var zero string
				dst.InsertionLossDesc = zero
			}
		case "antenna_gain_desc":
			if len(subs) > 0 {
				return fmt.Errorf("'antenna_gain_desc' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AntennaGainDesc = src.AntennaGainDesc
			} else {
				var zero string
				dst.AntennaGainDesc = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *LoradConfig_GatewayConfig) SetFields(src *LoradConfig_GatewayConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "beacon_enable":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_enable' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconEnable = src.BeaconEnable
			} else {
				var zero bool
				dst.BeaconEnable = zero
			}
		case "beacon_period":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_period' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconPeriod = src.BeaconPeriod
			} else {
				var zero uint32
				dst.BeaconPeriod = zero
			}
		case "beacon_freq_hz":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_freq_hz' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconFreqHz = src.BeaconFreqHz
			} else {
				var zero uint32
				dst.BeaconFreqHz = zero
			}
		case "beacon_freq_nb":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_freq_nb' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconFreqNb = src.BeaconFreqNb
			} else {
				var zero uint32
				dst.BeaconFreqNb = zero
			}
		case "beacon_step":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_step' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconStep = src.BeaconStep
			} else {
				var zero uint32
				dst.BeaconStep = zero
			}
		case "beacon_datarate":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_datarate' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconDatarate = src.BeaconDatarate
			} else {
				var zero uint32
				dst.BeaconDatarate = zero
			}
		case "beacon_bw_hz":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_bw_hz' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconBwHz = src.BeaconBwHz
			} else {
				var zero uint32
				dst.BeaconBwHz = zero
			}
		case "beacon_power":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_power' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconPower = src.BeaconPower
			} else {
				var zero uint32
				dst.BeaconPower = zero
			}
		case "beacon_infodesc":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_infodesc' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconInfodesc = src.BeaconInfodesc
			} else {
				dst.BeaconInfodesc = nil
			}
		case "beacon_latitude":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_latitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconLatitude = src.BeaconLatitude
			} else {
				var zero float64
				dst.BeaconLatitude = zero
			}
		case "beacon_longitude":
			if len(subs) > 0 {
				return fmt.Errorf("'beacon_longitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BeaconLongitude = src.BeaconLongitude
			} else {
				var zero float64
				dst.BeaconLongitude = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *LoraFwdConfig_Filter) SetFields(src *LoraFwdConfig_Filter, paths ...string) error {
	if len(paths) != 0 {
		return fmt.Errorf("message LoraFwdConfig_Filter has no fields, but paths %s were specified", paths)
	}
	if src != nil {
		*dst = *src
	}
	return nil
}

func (dst *LoraFwdConfig_Database) SetFields(src *LoraFwdConfig_Database, paths ...string) error {
	if len(paths) != 0 {
		return fmt.Errorf("message LoraFwdConfig_Database has no fields, but paths %s were specified", paths)
	}
	if src != nil {
		*dst = *src
	}
	return nil
}

func (dst *LoraFwdConfig_GWMPConfig) SetFields(src *LoraFwdConfig_GWMPConfig, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "node":
			if len(subs) > 0 {
				return fmt.Errorf("'node' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Node = src.Node
			} else {
				var zero string
				dst.Node = zero
			}
		case "service_uplink":
			if len(subs) > 0 {
				return fmt.Errorf("'service_uplink' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ServiceUplink = src.ServiceUplink
			} else {
				var zero uint32
				dst.ServiceUplink = zero
			}
		case "service_downlink":
			if len(subs) > 0 {
				return fmt.Errorf("'service_downlink' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ServiceDownlink = src.ServiceDownlink
			} else {
				var zero uint32
				dst.ServiceDownlink = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *LoraFwdConfig_API) SetFields(src *LoraFwdConfig_API, paths ...string) error {
	if len(paths) != 0 {
		return fmt.Errorf("message LoraFwdConfig_API has no fields, but paths %s were specified", paths)
	}
	if src != nil {
		*dst = *src
	}
	return nil
}

func (dst *GatewayInfoResponse_Attributes) SetFields(src *GatewayInfoResponse_Attributes, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "description":
			if len(subs) > 0 {
				return fmt.Errorf("'description' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Description = src.Description
			} else {
				var zero string
				dst.Description = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayInfoResponse_AntennaLocation) SetFields(src *GatewayInfoResponse_AntennaLocation, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "latitude":
			if len(subs) > 0 {
				return fmt.Errorf("'latitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Latitude = src.Latitude
			} else {
				var zero float64
				dst.Latitude = zero
			}
		case "longitude":
			if len(subs) > 0 {
				return fmt.Errorf("'longitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Longitude = src.Longitude
			} else {
				var zero float64
				dst.Longitude = zero
			}
		case "Altitude":
			if len(subs) > 0 {
				return fmt.Errorf("'Altitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Altitude = src.Altitude
			} else {
				var zero int32
				dst.Altitude = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayInfoResponse_OAuth2Token) SetFields(src *GatewayInfoResponse_OAuth2Token, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "access_token":
			if len(subs) > 0 {
				return fmt.Errorf("'access_token' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AccessToken = src.AccessToken
			} else {
				var zero string
				dst.AccessToken = zero
			}
		case "expires_in":
			if len(subs) > 0 {
				return fmt.Errorf("'expires_in' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ExpiresIn = src.ExpiresIn
			} else {
				var zero uint32
				dst.ExpiresIn = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayInfoResponse_Router) SetFields(src *GatewayInfoResponse_Router, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "id":
			if len(subs) > 0 {
				return fmt.Errorf("'id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Id = src.Id
			} else {
				var zero string
				dst.Id = zero
			}
		case "mqtt_address":
			if len(subs) > 0 {
				return fmt.Errorf("'mqtt_address' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MqttAddress = src.MqttAddress
			} else {
				var zero string
				dst.MqttAddress = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
